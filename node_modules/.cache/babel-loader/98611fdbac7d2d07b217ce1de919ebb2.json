{"ast":null,"code":"import { LOAD_DATA } from '../constants';\nexport const loadData = () => async dispatch => {\n  const entities = ['people', 'films', 'vehicles', 'planets', 'starships', 'species'];\n  let people = [];\n  let films = [];\n  let vehicles = [];\n  let planets = [];\n  let starships = [];\n  let species = [];\n\n  for (let entity of entities) {\n    let isNotLastPage = true;\n    let pageNum = 1;\n\n    do {\n      let response = await fetch(`https://swapi.dev/api/${entity}/?page=${pageNum}`);\n      let data = await response.json();\n      let results = data.results;\n\n      switch (entity) {\n        case 'films':\n          films = films.concat(results);\n          break;\n\n        case 'people':\n          people = people.concat(results);\n          break;\n\n        case 'vehicles':\n          vehicles = vehicles.concat(results);\n          break;\n\n        case 'planets':\n          planets = planets.concat(results);\n          break;\n\n        case 'starships':\n          starships = starships.concat(results);\n          break;\n\n        case 'species':\n          species = species.concat(results);\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.next === null) {\n        isNotLastPage = false;\n      }\n\n      pageNum++;\n    } while (isNotLastPage);\n  }\n\n  dispatch({\n    type: LOAD_DATA,\n    payload: {\n      people,\n      films,\n      vehicles,\n      planets,\n      starships,\n      species\n    }\n  });\n};","map":{"version":3,"sources":["D:/Star Wars/front-end/src/store/actions/dataActionCreator.js"],"names":["LOAD_DATA","loadData","dispatch","entities","people","films","vehicles","planets","starships","species","entity","isNotLastPage","pageNum","response","fetch","data","json","results","concat","next","type","payload"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AAGA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC5C,QAAMC,QAAQ,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,UAApB,EAAgC,SAAhC,EAA2C,WAA3C,EAAwD,SAAxD,CAAjB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,MAAT,IAAmBP,QAAnB,EAA6B;AACzB,QAAIQ,aAAa,GAAG,IAApB;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,OAAG;AACC,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,yBAAwBJ,MAAO,UAASE,OAAQ,EAAlD,CAA1B;AACA,UAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACA,UAAIC,OAAO,GAAGF,IAAI,CAACE,OAAnB;;AACA,cAAQP,MAAR;AACI,aAAK,OAAL;AACIL,UAAAA,KAAK,GAAGA,KAAK,CAACa,MAAN,CAAaD,OAAb,CAAR;AACA;;AACJ,aAAK,QAAL;AACIb,UAAAA,MAAM,GAAGA,MAAM,CAACc,MAAP,CAAcD,OAAd,CAAT;AACA;;AACJ,aAAK,UAAL;AACIX,UAAAA,QAAQ,GAAGA,QAAQ,CAACY,MAAT,CAAgBD,OAAhB,CAAX;AACA;;AACJ,aAAK,SAAL;AACIV,UAAAA,OAAO,GAAGA,OAAO,CAACW,MAAR,CAAeD,OAAf,CAAV;AACA;;AACJ,aAAK,WAAL;AACIT,UAAAA,SAAS,GAAGA,SAAS,CAACU,MAAV,CAAiBD,OAAjB,CAAZ;AACA;;AACJ,aAAK,SAAL;AACIR,UAAAA,OAAO,GAAGA,OAAO,CAACS,MAAR,CAAeD,OAAf,CAAV;AACA;;AACJ;AACI;AApBR;;AAsBA,UAAIF,IAAI,CAACI,IAAL,KAAc,IAAlB,EAAwB;AACpBR,QAAAA,aAAa,GAAG,KAAhB;AACH;;AACDC,MAAAA,OAAO;AAEV,KA/BD,QA+BSD,aA/BT;AAgCH;;AACDT,EAAAA,QAAQ,CAAC;AACLkB,IAAAA,IAAI,EAAEpB,SADD;AAELqB,IAAAA,OAAO,EAAE;AACLjB,MAAAA,MADK;AAELC,MAAAA,KAFK;AAGLC,MAAAA,QAHK;AAILC,MAAAA,OAJK;AAKLC,MAAAA,SALK;AAMLC,MAAAA;AANK;AAFJ,GAAD,CAAR;AAWH,CAvDM","sourcesContent":["import { LOAD_DATA } from '../constants';\r\n\r\n\r\nexport const loadData = () => async dispatch => {\r\n    const entities = ['people', 'films', 'vehicles', 'planets', 'starships', 'species'];\r\n    let people = [];\r\n    let films = [];\r\n    let vehicles = [];\r\n    let planets = [];\r\n    let starships = [];\r\n    let species = [];\r\n    for (let entity of entities) {\r\n        let isNotLastPage = true;\r\n        let pageNum = 1;\r\n        do {\r\n            let response = await fetch(`https://swapi.dev/api/${entity}/?page=${pageNum}`);\r\n            let data = await response.json()\r\n            let results = data.results\r\n            switch (entity) {\r\n                case 'films':\r\n                    films = films.concat(results)\r\n                    break;\r\n                case 'people':\r\n                    people = people.concat(results)\r\n                    break;\r\n                case 'vehicles':\r\n                    vehicles = vehicles.concat(results)\r\n                    break;\r\n                case 'planets':\r\n                    planets = planets.concat(results)\r\n                    break;\r\n                case 'starships':\r\n                    starships = starships.concat(results)\r\n                    break;\r\n                case 'species':\r\n                    species = species.concat(results)\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (data.next === null) {\r\n                isNotLastPage = false;\r\n            }\r\n            pageNum++;\r\n\r\n        } while (isNotLastPage)\r\n    }\r\n    dispatch({\r\n        type: LOAD_DATA,\r\n        payload: {\r\n            people,\r\n            films,\r\n            vehicles,\r\n            planets,\r\n            starships,\r\n            species,\r\n        }\r\n    })\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}